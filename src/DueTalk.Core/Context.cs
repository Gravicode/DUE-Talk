/// This file was generated by C# converter tool
/// Any changes made to this file manually will be lost next time the file is regenerated.

using System;
using System.Linq;
//using TypeScript.CSharp;

namespace DueTalk.Core
{

    public class Interaction
    {
        public string command { get; set; }
        public string code { get; set; }
    }
    public class Context
    {
        private String baseContext;
        private String context;
        private List<Interaction> baseInteractions = new();
        private List<Interaction> interactions = new();
        public Context(String baseContext)
        {
            this.baseContext = baseContext;
            this.context = baseContext;
            this.baseInteractions = this.createInteractionsFromContext(baseContext);
            this.interactions = this.baseInteractions;
        }

        public string getContext()
        {
            return this.context;
        }

        public string getPrompt(String command)
        {
            return $"{this.context}\n\n/* {command} */\n";
        }

        public void addInteraction(String command, String code)
        {
            //var context = $"{this.context}\n/* {command} */\n{code}";
            //var temp = new Span<string>(context.Split("\n"));
            //this.context = temp.Slice(0, -1).ToArray().Join("\n");
            this.interactions.Add(new Interaction() { code = code, command = command });
            this.createContextFromInteractions();
        }

        public void undoInteraction()
        {
            if (this.interactions.Count > 0)
            {
                this.interactions.RemoveAt(this.interactions.Count - 1);
                this.createContextFromInteractions();
            }
        }

        public void resetContext()
        {
            this.context = this.baseContext;
            this.interactions = this.baseInteractions;
        }

        public void trimContext(int length)
        {
            Console.WriteLine("Trimming Context");
            while (this.context.Length > length)
            {
                Console.WriteLine($"Trimming oldest interaction off context: {this.interactions[0].command}");
                this.interactions.RemoveAt(0);
                this.createContextFromInteractions();
                Console.WriteLine($"New prompt length: {this.context.Length}");
            }

            this.createContextFromInteractions();
        }

        public void createContextFromInteractions()
        {
            var content = string.Empty;
            foreach (var next in this.interactions)
            {
                content += $"/* {next.command} */{next.code}";
            }
            this.context = content;
        }

        public List<Interaction> createInteractionsFromContext(string baseContext)
        {
            List<Interaction> interactions = new List<Interaction>();
            var lines = baseContext.Split("\n");
            for (var i = 0; i < lines.Length; i++)
            {
                var line = lines[i];
                if (line.StartsWith("/*"))
                {
                    var command = line.Substring(2, line.IndexOf("*/")).Trim();
                    String code = "";
                    for (var j = i + 1; j < lines.Length; j++)
                    {
                        if (lines[j].StartsWith("/*"))
                        {
                            break;
                        }
                        else
                        {
                            code += lines[j] + "\n";
                        }
                    }
                    interactions.Add(new Interaction() { code = code, command = command });
                }
              
            }

            return interactions;
        }
    }
}